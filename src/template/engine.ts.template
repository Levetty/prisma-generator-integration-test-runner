// generated by prisma-generator-it-runner. Do not edit.
import {
  PrismaClient,
  Prisma,
  %(modelImports)
} from ".prisma/client";

export const modelNames = [
  %(modelNames)
];

export interface RecordSet {
  %(recordSetFields)
}

export interface RecordSetAssertion {
  %(recordSetAssertionFields)
}

export interface RecordSetAssertionSortKey {
  %(recordSetAssertionSortKeyFields)
}

export interface AutoIncrementReset {
  %(autoIncrementResetFields)
}

export async function applyRecordSet(
  db: PrismaClient,
  recordSet: RecordSet,
  autoIncrementReset: AutoIncrementReset,
) {
  %(applyRecordSetDeleteJobs)
  %(applyRecordSetCreateJobs)
  const autoIncrementResetJobs: Promise<number>[] = [];
  %(applyRecordSetAutoIncrementResetJobs)

  await Promise.all(autoIncrementResetJobs);
}

export async function importRecordSet(
  db: PrismaClient
): Promise<RecordSet> {
  const [
    %(importRecordSetVars)
  ] = await Promise.all([
    %(importRecordSetJobs)
  ]);

  return {
    %(importRecordSetVars)
  };
}

export async function assertRecordSet(
  db: PrismaClient,
  recordSet: RecordSetAssertion,
  assertFunc: <Model>(expected: Model[], actual: Model[], sortKeys?: (keyof Model)[]) => void,
  assertSortKey?: RecordSetAssertionSortKey,
) {
  // For each table, match records in order of their IDs.
  // If mutateSortKey is specified, use the results sorted by that key for matching.
  %(assertRecordSetAssertions)
}

export interface Seeder {
  %(seederFields)
}

// Fill missing records required for key constraints
export function autoComplete(recordSet: RecordSet, seeder: Seeder): RecordSet {
  // Apply auto complete for ignored tables only
  const original = Object.assign({}, recordSet);

  %(autoCompleteJobs)
  return recordSet;
}
